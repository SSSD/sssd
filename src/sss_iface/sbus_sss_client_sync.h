/*
    Generated by sbus code generator

    Copyright (C) 2017 Red Hat

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _SBUS_SSS_CLIENT_SYNC_H_
#define _SBUS_SSS_CLIENT_SYNC_H_

#include <errno.h>
#include <talloc.h>
#include <tevent.h>

#include "sbus/sbus_sync.h"
#include "sss_iface/sbus_sss_client_properties.h"
#include "sss_iface/sss_iface_types.h"

errno_t
sbus_call_fleet_ProcessSSSDFiles
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_uid,
     const char * arg_user_dir,
     uint16_t arg_prio);

errno_t
sbus_call_systemd_RestartUnit
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name,
     const char * arg_mode,
     const char ** _arg_job);

errno_t
sbus_call_systemd_StartUnit
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name,
     const char * arg_mode,
     const char ** _arg_job);

errno_t
sbus_call_systemd_StopUnit
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name,
     const char * arg_mode,
     const char ** _arg_job);

errno_t
sbus_call_dp_access_RefreshRules
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_dp_backend_IsOnline
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_domain_name,
     bool* _arg_status);

errno_t
sbus_call_dp_client_Register
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_Name);

errno_t
sbus_call_dp_failover_ActiveServer
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_service_name,
     const char ** _arg_server);

errno_t
sbus_call_dp_failover_ListServers
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_service_name,
     const char *** _arg_servers);

errno_t
sbus_call_dp_failover_ListServices
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_domain_name,
     const char *** _arg_services);

errno_t
sbus_call_proxy_auth_PAM
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     struct pam_data * arg_pam_data,
     struct pam_data ** _arg_pam_response);

errno_t
sbus_call_proxy_client_Register
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_ID);

errno_t
sbus_call_resp_domain_SetActive
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name);

errno_t
sbus_call_resp_domain_SetInconsistent
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name);

errno_t
sbus_call_resp_negcache_ResetGroups
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_resp_negcache_ResetUsers
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_dp_dp_autofsHandler
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_dp_flags,
     const char * arg_mapname,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_error_message);

errno_t
sbus_call_dp_dp_getAccountDomain
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_entry_type,
     const char * arg_filter,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_domain_name);

errno_t
sbus_call_dp_dp_getAccountInfo
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_dp_flags,
     uint32_t arg_entry_type,
     const char * arg_filter,
     const char * arg_domain,
     const char * arg_extra,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_error_message);

errno_t
sbus_call_dp_dp_getDomains
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_domain_hint,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_error_message);

errno_t
sbus_call_dp_dp_hostHandler
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_dp_flags,
     const char * arg_name,
     const char * arg_alias,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_error_message);

errno_t
sbus_call_dp_dp_pamHandler
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     struct pam_data * arg_pam_data,
     struct pam_data ** _arg_pam_response);

errno_t
sbus_call_dp_dp_sudoHandler
    (TALLOC_CTX *mem_ctx,
     struct sbus_sync_connection *conn,
     DBusMessage *raw_message,
     uint16_t* _arg_dp_error,
     uint32_t* _arg_error,
     const char ** _arg_error_message);

errno_t
sbus_call_monitor_RegisterService
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_name,
     uint16_t arg_version,
     uint16_t arg_type,
     uint16_t* _arg_monitor_version);

errno_t
sbus_call_nss_memcache_InvalidateAllGroups
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_nss_memcache_InvalidateAllInitgroups
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_nss_memcache_InvalidateAllUsers
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_nss_memcache_InvalidateGroupById
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     uint32_t arg_gid);

errno_t
sbus_call_nss_memcache_UpdateInitgroups
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path,
     const char * arg_user,
     const char * arg_domain,
     uint32_t * arg_groups);

errno_t
sbus_call_service_clearEnumCache
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_clearMemcache
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_goOffline
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_resInit
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_resetOffline
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_rotateLogs
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

errno_t
sbus_call_service_sysbusReconnect
    (struct sbus_sync_connection *conn,
     const char *busname,
     const char *object_path);

#endif /* _SBUS_SSS_CLIENT_SYNC_H_ */
